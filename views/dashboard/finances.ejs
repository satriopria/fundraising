<!-- Page Heading -->
<div class="d-sm-flex align-items-center justify-content-between mb-4">
  <h1 class="h3 mb-0 text-gray-800"><%- title %></h1>
</div>
<!--  Donations Section -->
<div class="card shadow mb-4">
  <div class="card-header py-3 d-flex justify-content-between align-items-center">
    <div class="d-flex align-items-center">
      <h6 class="m-0 font-weight-bold text-primary">Semua Data Keuangan</h6>
    </div>
    <button class="btn btn-primary btn-sm" data-toggle="modal" data-target="#addDonationModal">
      <i class="fas fa-plus"></i> Tambah
    </button>
  </div>
  <div class="card-body">
    <div id="allDonations"></div>
  </div>
</div>

<!-- Add Donation Modal -->
<div class="modal fade" id="addDonationModal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Tambah Data Keuangan</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <form id="addDonationForm">
        <div class="modal-body">
          <div class="form-group">
            <label>Nama</label>
            <input type="text" class="form-control" id="donorName" name="donorName" placeholder="nama" required>
          </div>
          <div class="form-group">
            <label>Email (Opsional)</label>
            <input type="email" class="form-control" id="donorEmail" name="donorEmail"
              placeholder="example@example.com">
          </div>
          <div class="form-group">
            <label>Nomor Handphone (Opsional)</label>
            <input type="text" class="form-control" id="donorPhone" name="donorPhone" placeholder="081234567890">
          </div>

          <div class="mb-3">
            <label class="form-label">Masukkan Nominal</label>
            <div class="input-group">
              <span class="input-group-text">Rp</span>
              <input type="number" class="form-control" name="amount" placeholder="0" min="1000">
            </div>
          </div>

          <div class="form-group">
            <label>Nama Projek</label>
            <select id="selectProject" class="form-control" name="projectId" required>

            </select>
          </div>
          <div class="form-group">
            <label>Metode Pembayaran</label>
            <select id="selectPaymentMethod" class="form-control" name="paymentMethodId" required>

            </select>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Batal</button>
          <button type="submit" class="btn btn-primary">Buat</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- All Transactions Section
<div class="card shadow mb-4">
  <div class="card-header py-3 d-flex justify-content-between align-items-center">
    <h6 class="m-0 font-weight-bold text-primary">All Transactions</h6>
    <button class="btn btn-primary btn-sm" data-toggle="modal" data-target="#addTransactionModal">
        <i class="fas fa-plus"></i> Add Donation
      </button>
  </div>
  <div class="card-body">
    <div id="allTransactions"></div>
  </div>
</div> -->

<script src="https://unpkg.com/gridjs/dist/gridjs.umd.js"></script>
<!-- table -->
<script>

  // All Donations Table
  const grid = new gridjs.Grid({
    columns: [
      { name: "Nama" },
      { name: "Email" },
      { name: "No Handphone" },
      { name: "Project" },
      { name: "Jumlah Donasi"},
      { name: "Tanggal"},
      { name: "Status"},
      { name: "Aksi"}
    ],
    server: {
      url: '/api/finance/user',
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`
      },
      then: data => data.map(donation => [
        donation.name,
        donation.email ? donation.email : '-',
        donation.phone ? donation.phone : '-',
        donation.project_id,
        new Intl.NumberFormat('id-ID', {
          style: 'currency',
          currency: 'IDR'
        }).format(donation.amount),
        new Date(donation.createdAt).toLocaleDateString('id-ID') + ' ' + new Date(donation.createdAt).toLocaleTimeString(),
        gridjs.html(`<b><span style="text-transform: uppercase; color: ${donation.status === 'active' ? 'green' : (donation.status === 'pending' ? 'darkgrey' : (donation.status === 'expired' ? 'lightgrey' : 'orange'))};">${donation.status}</span></b>`),

        gridjs.html(`
        ${donation.status !== 'active' && donation.status !== 'expired' ? `
        <button id="confirm" onclick="confirmDonation('${donation.id}')" class="btn btn-sm btn-secondary">
          <i class="fas fa-check"></i> Konfirmasi
        </button>` : ''}
        `)
      ])
    },
    search: true,
    pagination: {
      limit: 10
    },
    style: {
      table: {
        'font-size': '14px',
        width: '100%'
      }
    },
    language: {
      'search': {
        'placeholder': 'üîç Cari...'
      }
    },
  }).render(document.getElementById("allDonations"));
</script>

<!-- handle form/action -->
<script>
  // admin confirm
  async function confirmDonation(invoiceId) {
    console.log('aljsdf')
    try {
      const confirm = await axios.post(`/api/finance/${invoiceId}/admin_confirm`);
      console.log('Response:', confirm.data); // Debugging respons
      Swal.fire({
        title: "Apakah Anda yakin ingin melakukan konfirmasi data tersebut?",
        text: "Data akan dikonfirmasi dan aktif",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Konfirmasi",
        cancelButtonText: "Batal"
      }).then((result) => {
        if (result.isConfirmed) {
          Swal.fire({
            title: "Data berhasil dikonfirmasi!",
            text: "",
            icon: "success"
          });
        }
        grid.forceRender();
      });
    } catch (error) {
      Swal.fire({
        icon: 'error',
        title: 'Oops...',
        text: 'Gagal mengonfirmasi donasi. Silakan coba lagi.',
      });
    }
  }

  document.getElementById('addDonationForm').addEventListener('submit', async (e) => {
    e.preventDefault(); // Mencegah form melakukan submit default

    try {
      // Ambil data dari form
      const donorName = document.getElementById('donorName').value;
      const donorEmail = document.getElementById('donorEmail').value || null;
      const donorPhone = document.getElementById('donorPhone').value || null;
      const amount = document.querySelector('input[name="amount"]').value;
      const projectId = document.getElementById('selectProject').value;
      const paymentMethodId = document.getElementById('selectPaymentMethod').value;

      // Validasi input (contoh sederhana)
      if (!donorName || !amount || !projectId || !paymentMethodId) {
        alert('Mohon lengkapi semua data yang diperlukan.');
        return;
      }

      // Ambil token dari localStorage untuk autentikasi (jika diperlukan)
      // const token = localStorage.getItem('token');

      // Kirim data ke API menggunakan axios
      const response = await axios.post('/api/finance/create', {
        transaction_name: "manual donation",
        name: donorName,
        email: donorEmail,
        phone: donorPhone,
        amount,
        project_id: projectId,
        payment_method_id: paymentMethodId,
        status: "active"
      });

      // Tampilkan notifikasi sukses
      Swal.fire({
        icon: 'success',
        title: 'Data berhasil dibuat!',
        // text: 'Terima kasih atas donasi Anda.',
      }).then(() => {
        $('#addDonationModal').modal('hide');
        e.target.reset();
        grid.forceRender()
      });
    } catch (error) {
      console.error('Error submitting donation:', error.response?.data || error.message);

      // Tampilkan notifikasi error
      Swal.fire({
        icon: 'error',
        title: 'Gagal menyimpan data',
        text: error.response?.data?.message || 'Terjadi kesalahan. Silakan coba lagi.',
      });
    }
  });

</script>

<!-- onload -->
<script>
  document.addEventListener('DOMContentLoaded', async () => {
    try {
      // Fetch project list
      const projects = await axios.post('/api/project/user', {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`,
        },
      });

      // Populate project dropdown
      const projectSelect = document.getElementById('selectProject');
      projects.data.forEach((project) => {
        const option = document.createElement('option');
        option.value = project.id; // Ganti 'id' sesuai field pada respons API
        option.textContent = project.name; // Ganti 'name' sesuai field pada respons API
        projectSelect.appendChild(option);
      });

      // Fetch payment method list
      const paymentMethods = await axios.post('/api/payment/user', {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`,
        },
      });

      // Populate payment method dropdown
      const paymentMethodSelect = document.getElementById('selectPaymentMethod');
      paymentMethods.data.forEach((method) => {
        const option = document.createElement('option');
        option.value = method.id; // Ganti 'id' sesuai field pada respons API
        option.textContent = `${method.account_number} ${method.provider} - a/n ${method.account_name}`; // Ganti 'name' sesuai field pada respons API
        paymentMethodSelect.appendChild(option);
      });
    } catch (error) {
      console.error('Error fetching data:', error.response?.data || error.message);
    }
  });
</script>