<!-- Page Heading -->
<div class="d-sm-flex align-items-center justify-content-between mb-4">
  <h1 class="h3 mb-0 text-gray-800"><%- title %></h1>
</div>

<!-- Payment Methods Section -->
<div class="card shadow mb-4">
  <div class="card-header py-3 d-flex justify-content-between align-items-center">
    <h6 class="m-0 font-weight-bold text-primary">Metode Pembayaran</h6>
    <button class="btn btn-primary btn-sm" data-toggle="modal" data-target="#addPaymentMethodModal">
      <i class="fas fa-plus"></i> Tambah
    </button>
  </div>
  <div class="card-body">
    <div id="paymentMethods"></div>
  </div>
</div>

<!-- Add Payment Method Modal -->
<div class="modal fade" id="addPaymentMethodModal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Tambah Metode Pembayaran</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <form id="addPaymentMethodForm">
        <div class="modal-body">
          <div class="form-group">
            <label>Tipe</label>
            <select class="form-control" name="type" required>
              <option value="bank">Bank Transfer</option>
              <option value="e-wallet">E-Wallet</option>
            </select>
          </div>
          <div class="form-group">
            <label>Nama Provider</label>
            <input type="text" class="form-control" name="provider" placeholder="e.g. BCA, GoPay, etc" required>
          </div>
          <div class="form-group">
            <label>Nomor Rekening</label>
            <input type="text" class="form-control" name="accountNumber" placeholder="Masukkan nomor rekening" required>
          </div>
          <div class="form-group">
            <label>Atas Nama Rekening</label>
            <input type="text" class="form-control" name="accountName" placeholder="Masukkan nama pemilik rekening"
              required>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Batalkan</button>
          <button type="submit" class="btn btn-primary">Simpan</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Edit Payment Method Modal -->
<div class="modal fade" id="editPaymentMethodModal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Ubah Metode Pembayaran</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <form id="editPaymentMethodForm">
        <input type="hidden" name="id">
        <div class="modal-body">
          <div class="form-group">
            <label>Tipe</label>
            <select class="form-control" name="type" required>
              <option value="bank">Bank Transfer</option>
              <option value="ewallet">E-Wallet</option>
            </select>
          </div>
          <div class="form-group">
            <label>Nama Provider</label>
            <input type="text" class="form-control" name="provider" required>
          </div>
          <div class="form-group">
            <label>Nomor Rekening</label>
            <input type="text" class="form-control" name="accountNumber" required>
          </div>
          <div class="form-group">
            <label>Atas Nama Rekening</label>
            <input type="text" class="form-control" name="accountName" required>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Batalkan</button>
          <button type="submit" class="btn btn-primary">Ubah</button>
        </div>
      </form>
    </div>
  </div>
</div>

<script src="https://unpkg.com/gridjs/dist/gridjs.umd.js"></script>
<script>
  // Payment Methods Table
  const grid = new gridjs.Grid({
    columns: [
      "Tipe",
      "Provider",
      "Nomor Rekening",
      "Pemilik Rekening",
      {
        name: 'Actions',
        formatter: (cell, row) => {
          return gridjs.html(`
            <button class="btn btn-sm btn-info mr-1" onclick="editPaymentMethod('${row.cells[4].data}')">
              <i class="fas fa-edit"></i>
            </button>
            <button class="btn btn-sm btn-danger" onclick="deletePaymentMethod('${row.cells[4].data}')">
              <i class="fas fa-trash"></i>
            </button>
          `);
        }
      },
      {
        name: 'id',
        hidden: true
      }
    ],
    server: {
      url: '/api/payment/user',
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`
      },
      then: data => data.map(method => [
        method.type,
        method.provider,
        method.account_number,
        method.account_name,
        method.id
      ])
    },
    search: true,
    pagination: {
      limit: 5,
      summary: false
    },
    style: {
      table: {
        'font-size': '14px',
        width: '100%'
      }
    },
    language: {
      'search': {
        'placeholder': '🔍 Cari...'
      }
    },
  }).render(document.getElementById("paymentMethods"));

  // Add Payment Method
  document.getElementById('addPaymentMethodForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    let word = 'Dibuat';
    const data = {
      name: formData.get('provider'), // Using provider as name
      account_number: formData.get('accountNumber'),
      account_name: formData.get('accountName'),
      provider: formData.get('provider'),
      type: formData.get('type')
    };

    try {
      const response = await axios.post('/api/payment/create', data, {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });

      Swal.fire({
        icon: 'success',
        title: `Payment Method Berhasil Dibuat`,
        text: response.data.message,
      })
      $('#addPaymentMethodModal').modal('hide');
      e.target.reset();
      grid.forceRender();
    } catch (error) {
      console.error('Error:', error);
      alert('An error occurred');
    }
  });

  // Edit Payment Method
  async function editPaymentMethod(id) {
    try {
      const response = await axios.get(`/api/payment/${id}`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      const data = response.data;

      const form = document.getElementById('editPaymentMethodForm');
      form.elements['id'].value = data.id;
      form.elements['type'].value = data.type;
      form.elements['provider'].value = data.provider;
      form.elements['accountNumber'].value = data.account_number;
      form.elements['accountName'].value = data.account_name;

      $('#editPaymentMethodModal').modal('show');
    } catch (error) {
      console.error('Error:', error);
      alert('An error occurred');
    }
  }

  document.getElementById('editPaymentMethodForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    const id = formData.get('id');
    const data = {
      name: formData.get('provider'),
      account_number: formData.get('accountNumber'),
      account_name: formData.get('accountName'),
      provider: formData.get('provider'),
      type: formData.get('type')
    };

    try {
      const response = await axios.put(`/api/payment/${id}`, data, {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });

      if (response.status === 200) {
        $('#editPaymentMethodModal').modal('hide');
        e.target.reset();
        grid.forceRender();
      } else {
        alert('Failed to update payment method');
      }

      Swal.fire({
        icon: 'success',
        title: `Payment Method Berhasil Diubah`,
        text: response.data.message,
      })
      $('#editPaymentMethodModal').modal('hide');
      e.target.reset();
      grid.forceRender();
    } catch (error) {
      console.error('Error:', error);
      alert('An error occurred');
    }
  });

  // Delete Payment Method
  async function deletePaymentMethod(id) {
    if (confirm('Are you sure you want to delete this payment method?')) {
      try {
        const response = await axios.delete(`/api/payment/${id}`, {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          }
        });

        if (response.status === 200) {
          grid.forceRender();
        } else {
          alert('Failed to delete payment method');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('An error occurred');
      }
    }
  }
</script>