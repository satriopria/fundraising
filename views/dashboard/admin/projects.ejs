<!-- Page Heading -->
<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800"><%- title %></h1>
  </div>
  <button id="createButton" type="button" class="btn btn-primary" data-toggle="modal" data-target="#projectModal">Buat
    Proyek Baru</button>
  <div id="project"></div>
  
  <!-- Trigger the modal with a button -->
  
  
  
  
  
  <!-- Modal -->
  <div id="projectModal" class="modal fade" role="form">
    <div class="modal-dialog">
  
      <!-- Modal content-->
      <div class="modal-content">
        <div class="modal-header">
          <h4 class="modal-title">Modal Header</h4>
          <button type="button" class="close" data-dismiss="modal">&times;</button>
        </div>
        <div class="modal-body">
          <form id="projectModalForm">
            <input type="hidden" name="id" id="id">
            <div class="form-group">
              <label for="projectName">Nama Proyek</label>
              <input type="text" class="form-control" id="projectName" name="projectName" required>
            </div>
            <div class="form-group">
              <label for="description">Deskripsi</label>
              <textarea class="form-control" id="description" name="description" rows="3"></textarea>
            </div>
            <div class="form-group">
              <div class="row g-3">
                <div class="col">
                  <label for="type">Tipe</label>
                  <input type="text" class="form-control" id="type" name="type" required>
                </div>
                <div class="col">
                  <label for="budget">Jumlah Target (Rp)</label>
                  <input type="number" min="1" class="form-control" id="budget" name="budget" required>
                </div>
              </div>
            </div>
            <div class="form-group">
              <label class="d-block">Periode Proyek</label>
              <div class="d-flex">
                <input type="text" class="form-control me-2" id="startDate" name="startDate"
                  placeholder="Tanggal Mulai Proyek" onfocus="(this.type='date')" onblur="(this.type='text')" required>
                <input type="text" class="form-control" id="endDate" name="endDate" placeholder="Tanggal Selesai Proyek"
                  onfocus="(this.type='date')" onblur="(this.type='text')" required>
              </div>
            </div>
            <div id="subscription" class="form-group">
              <label class="d-block">Periode Berlangganan</label>
              <div class="d-flex">
                <input type="text" class="form-control me-2" id="startDateSub" name="startDateSub"
                  placeholder="Tanggal Mulai Berlangganan" onfocus="(this.type='date')" onblur="(this.type='text')"
                  required>
                <input type="text" class="form-control" id="endDateSub" name="endDateSub"
                  placeholder="Tanggal Selesai Berlangganan" onfocus="(this.type='date')" onblur="(this.type='text')"
                  required>
              </div>
              <p class="text-info"><small> periode berlangganan ini akan berpengaruh terhadap harga. Harga/hari adalah Rp 2.500.</small></p>
            </div>
            <div class="form-group">
              <label for="image"><s>Gambar Cover</s> <sup style="color: blue;">coming soon</sup></label>
              <input type="file" class="form-control" id="image" name="image" disabled>
            </div>
            <button id="submitForm" type="submit" class="btn btn-primary">Buat Proyek</button>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-default" data-dismiss="modal">Batalkan</button>
        </div>
      </div>
  
    </div>
  </div>
  
  <!-- table -->
  <script src="https://unpkg.com/gridjs/dist/gridjs.umd.js"></script>
  <script>
    const grid = new gridjs.Grid({
      columns: ["Nama Proyek", "Target", "Periode Berlangganan", "Status", "Tanggal Dibuat", "Aksi"],
      server: {
        url: '/api/project/all',
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        then: data => data.map(project => [
          project.name,
          new Intl.NumberFormat('id-ID', {
            style: 'currency',
            currency: 'IDR'
          }).format(project.budget),
          `${project.start_subscription_date ? new Date(project.start_subscription_date).toLocaleDateString('id-ID') : ''} - ${project.end_subscription_date ? new Date(project.end_subscription_date).toLocaleDateString('id-ID') : ''}`,
          project.status,
          new Date(project.createdAt).toLocaleDateString('id-ID'),
          gridjs.html(`
          <button id="edit" onclick="editProjectModal(${project.id})" class="btn btn-sm btn-warning">
            <i class="fas fa-edit"></i> edit
          </button>
          ${project.status === 'pending' || project.status === 'confirmed' ? `
          <button id="confirm" onclick="confirmProject(${project.id})" class="btn btn-sm btn-success">
            <i class="fas fa-check"></i> confirm
          </button>
          ` : ''}
          `)
        ]),
        handle: (res) => {
          if (!res.ok) {
            throw Error('Fetch failed');
          }
          return res.json();
        }
      },
      search: true,
      pagination: {
        limit: 10,
        enabled: true,
        summary: false
      },
      language: {
        'search': {
          'placeholder': 'üîç Cari...'
        }
      },
      style: {
        td: {
          border: '1px solid #ccc',
          padding: '10px'
        },
        table: {
          'font-size': '15px',
          width: '100%'
        }
      }
    }).render(document.getElementById("project"));
  </script>
  
  <!-- form handle submit -->
  <script>
    // Tambahkan event listener untuk menangani form submit
    document.getElementById('projectModal').addEventListener('submit', async (e) => {
      e.preventDefault();
  
      const projectName = document.getElementById('projectName').value;
      const description = document.getElementById('description').value;
      const type = document.getElementById('type').value
      const startDate = document.getElementById('startDate').value;
      const endDate = document.getElementById('endDate').value;
      const budget = document.getElementById('budget').value;
      const startSub = document.getElementById('startDateSub').value
      const endSub = document.getElementById('endDateSub').value
      let api, word;
  
      try {
        const id = document.getElementById("id").value;
        if (!id) {
          // Create new project
          api = '/api/project/create';
          word = 'Dibuat';
        } else {
          // Edit existing project
          api = `/api/project/${id}`;
          word = 'Diperbarui';
        }
  
        // Send data to API using Axios
        const method = id ? 'put' : 'post';
        const response = await axios[method](api, {
          name: projectName,
          description,
          start_date: startDate,
          end_date: endDate,
          start_subscription_date: startSub,
          end_subscription_date: endSub,
          budget,
          type
        });
        Swal.fire({
          icon: 'success',
          title: `Projek Berhasil ${word}`,
          text: response.data.message,
        }).then((result) => {
          // if (result.isConfirmed) {
          //   window.location.href = `/project-invoice`;
          // }
        });
  
        // $('#projectModal').modal('hide');
        // e.target.reset();
        // grid.forceRender();
      } catch (error) {
        console.log(error.response.data)
        // Tangani error dari server
        if (error.response) {
          Swal.fire({
            icon: 'error',
            title: `Projek Gagal ${word}`,
            text: error.response.data.message || 'Kesalahan tidak diketahui.',
          });
        } else {
          // Tangani error jaringan
          Swal.fire({
            icon: 'error',
            title: 'Terjadi Kesalahan',
            text: 'Tidak dapat terhubung ke server.',
          });
        }
      }
    });
  
  </script>
  
  <script>
    //create button
    document.getElementById('createButton').addEventListener('click', async (e) => {
      document.getElementById('subscription').style.display = 'block';
      document.getElementById('subscription').disabled = false;
      document.getElementsByClassName('modal-title')[0].textContent = 'Buat Proyek Baru'
      document.getElementById('submitForm').textContent = 'Buat Proyek'
      document.getElementById('id').value = ""
      document.getElementById('projectName').value = "";
      document.getElementById('description').value = "";
      document.getElementById('type').value = "";
      document.getElementById('startDate').value = "";
      document.getElementById('endDate').value = "";
      document.getElementById('budget').value = "";
      document.getElementById('status').value = "";
    })
  
    const editProjectModal = async (id) => {
      try {
        // Fetch project data from API
        const response = await axios.get(`/api/project/${id}`);
        const project = response.data;
        console.log(response)
  
        // Show modal and set title
        $('#projectModal').modal('show');
        $('.modal-title').text('Ubah Data Proyek');
        $('#submitForm').text('Ubah Proyek')
  
        // Fill form fields with project data
        document.getElementById('projectName').value = project.name;
        document.getElementById('description').value = project.description;
        document.getElementById('type').value = project.type;
        document.getElementById('startDate').value = project.start_date.split('T')[0];
        document.getElementById('endDate').value = project.end_date.split('T')[0];
        document.getElementById('budget').value = project.budget;
        document.getElementById('subscription').disabled = true;
        document.getElementById('subscription').style.display = 'none';
  
        // Store project ID in hidden field or data attribute
        document.getElementById('id').value = id;
  
      } catch (error) {
        console.error('Error fetching project:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'Gagal mengambil data project',
        });
      }
    };
  </script>